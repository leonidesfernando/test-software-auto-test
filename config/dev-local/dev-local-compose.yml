services:

  ############################### Kafka

  kafka:
    image: bitnami/kafka:3.1.0
    container_name: kafka
    command:
      - 'sh'
      - '-c'
      - '/opt/bitnami/scripts/kafka/setup.sh && kafka-storage.sh format --config "$${KAFKA_CONF_FILE}" --cluster-id "lkorDA4qT6W1K_dk0LHvtg" --ignore-formatted  && /opt/bitnami/scripts/kafka/run.sh' # Kraft specific initialise
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Start Kraft Setup (Kafka as Controller - no Zookeeper)
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LOG_DIRS=/tmp/logs
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094
      # End Kraft Specific Setup
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,INTERNAL://kafka:9094
    ports:
      - "0.0.0.0:9092:9092"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8181:8080"
    restart: "always"
    environment:
      #KAFKA_CLUSTERS_0_NAME: "lkorDA4qT6W1K_dk0LHvtg"
      KAFKA_CLUSTERS_0_NAME: "lkorDA4qT6W1K_dk0LHvtg"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
    depends_on:
      - kafka

  ############################### Kafka UI
  #kafka_ui:
  #  container_name: kafka-ui
  #  image: provectuslabs/kafka-ui:latest
  #  ports:
  #    - "8181:8080"
  #  environment:
  #    - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
  #  networks:
  #    - dev-local-network


  ############################### AWS LocalStack
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566" # gateway and external services port
    environment:
      - SERVICES=s3,logs,lambda,iam, secretsmanager
      - DEBUG=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - LOCALSTACK_HEALTH_URL=http://localhost:4566/_localstack/health
    volumes:
      - localstack_data:/var/lib/localstack
      - ./awslocal/init:/etc/localstack/init/
      - ./awslocal/init:/etc/localstack/init/ready.d
      - ./awslocal/s3:/etc/localstack/s3
      - ./awslocal/secrets:/etc/localstack/secrets
      - ./awslocal/lambda:/opt/lambda/
      -  /var/run/docker.sock:/var/run/docker.sock
      - /tmp/localstack_custom:/tmp/localstack_custom
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/_localstack/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dev-local-network

volumes:
  localstack_data:
    driver: local
  kafka_data:
    #driver: local

networks:
  dev-local-network:
    driver: bridge